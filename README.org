#+title: LITE LISP Tree Sitter Parser
#+author: Lens
#+description: A parser for LITE LISP, the language to configure the LITE text editor.
#+created: <2022-12-03 Sat>

** How to Build =libtree-sitter-lite_lisp= Shared Object

- A C compiler (we like [[https://gcc.gnu.org/][GCC]])
- [[https://cmake.org/download/][CMake]] [optional]

A CMake build script is pre-provided; use that to generate a build
system, then invoke it.
#+begin_src sh
  cmake -B bld
  cmake --build bld
#+end_src

Alternatively, use a compiler (and lots of flags) to build it. Make
sure to change the output file name to the proper extension based on
your platform.

#+begin_src sh
  gcc -O3 -march=native src/parser.c -shared -flto -fPIC -o tree-sitter-lite_lisp.so -lm -lpthread -Wall -Wextra
#+end_src

** How to Generate Parser from =grammar.js=

- [[https://tree-sitter.github.io/tree-sitter/creating-parsers#installation][tree-sitter CLI]]

NOTE: Only one of these needs to be completed.

*** Node.js

#+begin_src sh
  npm install
  npx tree-sitter generate
#+end_src

This will compile and link a shared library ~tree-sitter-lite_lisp~ into the
=bld= subdirectory. It is recommended to copy it into =~/.tree_sitter/bin=.
This shared library could also be used by adding the =bld= path into
~parser-directories~ in =~/tree-sitter/config.json=.

*** Cargo

NOTE: Assuming you've built tree-sitter from source using =Cargo= and have successfully installed the CLI executable somewhere in your PATH environment variable, you can now just generate the grammar.

#+begin_src sh
  tree-sitter generate
#+end_src

*** What now?

Now that you have successfully generated the parser, the =src= directory has been populated with =C= source code representing the grammar, which can be built into a dynamic library or statically linked with and used by many different programs. See instructions above on building the shared object.
